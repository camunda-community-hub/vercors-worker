{{>_ajaxHelpers}}

<script>

    function initNavBar() {
        $(".navbar-burger").click(function() {
            // Toggle the "is-active" class on both the "navbar-burger" and the "navbar-menu"
            $(".navbar-burger").toggleClass("is-active");
            $(".navbar-menu").toggleClass("is-active");
        });
    }

    function getWorkers() {
        return getAjax('/cherry/api/runner/list', {}, {})
    }

    function getWorker(workerName) {
        return getAjax(`/cherry/api/runner/detail?name=${workerName}&stats=true`, {}, {})
    }

    function getDashboardInfo() {
      return getAjax('/cherry/api/runner/dashboard', {}, {})
    }

    function getSystemParameters() {
      return getAjax('/cherry/api/runtime/parameters', {}, {})
    }
    function getTemplate(templateName) {
        return getAjax(`/templates/${templateName}`, "", {contentType: 'text/plain', dataType: "html"})
    }

    function stopRunner(runnerName) {
        return putAjax(`/cherry/api/runner/stop?name=${runnerName}`, "", {contentType: 'text/plain', dataType: "html"})
    }

    function startRunner(runnerName) {
        return putAjax(`/cherry/api/runner/start?name=${runnerName}`, "", {contentType: 'text/plain', dataType: "html"})
    }

    function onWorkerClick(table) {

        return function(e) {
            let runnerName = table.row(this).data().runnerName;
            window.location = "/worker?runnerName="+runnerName;
        }
    }

    function onRunnerDetailClick(runnerName) {
      debugger;
      window.location = "/worker?runnerName="+runnerName;
    }
    function initWorkersTable() {
        let data = [];
        getWorkers().then(function(result) {
            if(result) {
                for(const k in result) {
                    console.log("worker detected");
                    let worker = result[k];
                    data.push ({
                        runnerName: worker.name,
                        runnerType: worker.type,
                        runnerTypeRunner: worker.typeRunner,
                        runnerClassName: worker.className,
                        runnerLogo: worker.logo
                    })
                }

                let table = $('#runnersTable').DataTable({
                    data: data,
                    columns: [
                        {
                            data: 'runnerName',
                            render: function (data, type, row) {
                              if(row.runnerLogo) {
                                  return '<img width="30px" src="' + row.runnerLogo +'"></img>&nbsp;&nbsp; ' + data;
                              } else {
                                return data;
                              }

                            }
                        },
                        {data: 'runnerType'},
                        {data: 'runnerTypeRunner'},
                        {data: 'runnerClassName'},
                    ]
                });

                $('.dataTable').on('click', 'tbody tr', onWorkerClick(table));
            }

        });
    }

    function initDashboardTable() {
      let listWorkersDashboard = [];
      getDashboardInfo().then(function(result) {
        if(result) {
          for(var i in result.details)
          {
            let workerStats = result.details[ i ];
            workerStats.statistic.progressExecutionsSucceeded = workerStats.statistic.executionsSucceeded;
            workerStats.statistic.progressExecutions = workerStats.statistic.executions;

            // no execution? Do not display a red bar. Empty bar does not exist, so display a green bar
            if (workerStats.statistic.progressExecutions==0) {
              workerStats.statistic.progressExecutionsSucceeded = 1;
              workerStats.statistic.progressExecutions = 1;
            }
          }

          let templateDetails='<div> \
            \{\{#details\}\} \
              <div class="column is-two-thirds" style="padding: 0px 0px 50px 0px"> \
                <h1 class="title is-5 job-type is-hoverable" > \
                    <table>\
                      <tr>\
                        <td style="border: 1px solid; padding: 5px;text-align: center; box-shadow: 5px 5px">\
                          <img width="30px" src="\{\{logo\}\}"\
                            onclick="onRunnerDetailClick(\{\{name\}\})"></img>\
                        </td>\
                        <td style="padding: 5px 0px 0px 25px">\
                          \{\{name\}\} \, \{\{statistic.executions\}\} total,\
                           \{\{statistic.executionsFailed\}\} failed \
                           \{\{statistic.executionsBpmnError\}\} BPMN Errors \
                        </td> \
                      </tr><tr> \
                        <td style="border: 1px solid;box-shadow: 5px 5px">\
                          \{\{#active\}\} \
                            <button class="start-runner button is-selected is-primary" style="height: 1.5em">Active</button>\
                          \{\{/active\}\} \
                          \{\{^active\}\} \
                            <button class="stop-runner button is-selected is-danger" style="height: 1.5em">Stopped</button> \
                          \{\{/active\}\} \
                        </td>\
                      </tr>\
                    </table> \
                <h1> \
                <progress class="progress is-small is-primary" \
                  value="\{\{statistic.progressExecutionsSucceeded\}\}" \
                  max="\{\{statistic.progressExecutions\}\}"> \
                </progress> \
                <h2 > \
                  <i>Average \{\{performance.averageTimeInMs\}\} ms \
                     Pic \{\{performance.picTimeInMs\}\} ms \
                  </i></h2> \
              </div> \
            \{\{/details\}\} \
          </div>'

          $("#dashboardDetails").html(Mustache.render(templateDetails,result));


          result.progressTotalExecutionsSucceeded= result.totalExecutionsSucceeded;
          result.progressTotalExecutions= result.totalExecutions;
          if (result.progressTotalExecutions==0) {
            result.progressTotalSucceeded=1;
            result.progressTotalExecutions=1;
          }


          let templateHeader='<h1 class="title is-5"> \
              {\{totalsucceed\}\} total jobs in last 24 hours of {\{nbRunners\}\} Runners\
            </h1> \
            <div class="columns"> \
              <div class="column"> \
                <h1 class="title is-4 has-text-primary">\{\{totalExecutionsSucceeded\}\} Successful</h1> \
              </div> \
              <div class="column"> \
                <h1 class="title is-4 has-text-danger">\{\{totalExecutionsFailed\}\} Failed</h1> \
              </div> \
              <div class="column"> \
                <h1 class="title is-4 has-text-danger">\{\{totalExecutionsBpmnErrors\}\} BPMN Errors</h1> \
              </div> \
            </div> \
          <progress class="progress is-large is-primary" \
                    value="\{\{progressTotalExecutionsSucceeded\}\}" \
                    max="\{\{progressTotalExecutions\}\}"> \
         </progress>'

          $("#dashboardHeader").html(Mustache.render(templateHeader,result));

          console.log("initDashboardTable : the end list="+listWorkersDashboard.length+" html="+dashboardHtml)
        }
      });
    }
</script>
