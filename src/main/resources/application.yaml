
cherry:
  connectorslib:
    uploadpath: ./localstorage/upload
    classloaderpath: ./localstorage/classloader
    forcerefresh: true

  runners:
    # the runtime load all embedded runners
    embeddedrunner: true

    # the runtime load ping runners
    pingrunner: false


# Visit https://github.com/camunda-community-hub/spring-zeebe/?tab=readme-ov-file#connect-to-zeebe

# -------------------- Self Manage
zeebe:
  client:
    broker:
      gateway-address: host:docker:internal:26500
    security.plaintext: true
    worker:
      threads: 14
      maxJobsActive: 30


# -------------------- Self Manage Multi-Tenancy
# zeebe.clientMulti:
#     broker.gateway-address: 127.0.0.1:26500
#     # zeebe.client.broker.gateway-address=host.docker.internal:26500
#     security:
#       plaintext: false
#     # list of tenant's ID separated with a semi colons
#     tenantIds: <default>;red
#     oauth:
#       clientId: worker
#       clientSecret: uMpRNGJciY7EHgv3yuuO4xEFdaeb85oa
#       authorizationServerUrl: http://localhost:18080/auth/realms/camunda-platform/protocol/openid-connect/token
#       clientAudience: zeebe-api

# -------------------- SAAS
# zeebe:
#   client:
#    cloud:
#      region: bru-2
#      clusterId: f867aa3d-5ee7-4324-96e8-21f557f104af
#      clientId: si71NBAWtUlREmfKja5oQC3M.WsT~sHa
#      clientSecret: pCTITndkvyNsaSkfJ-ji5w38vaP19QAXWURM3UVC1.J.eVyxa44uITFv3_c8iFi2


server.port: 9081
logging.level.root: INFO


# return message with BAD_REQUEST to the client
server.error.include-message: always

# Spring Boot Configuration
spring.application.name: CherryRuntime

# Cherry will override the zeebeClient bean
spring:
  main:
    allow-bean-definition-overriding: true

# --------------------- H2 - default
spring.datasource:
  url: "jdbc:h2:file:./cherry.db"
  driver-class-name: "org.h2.Driver"
  username: "sa"
  password: "password"
spring.jpa.database-platform: "org.hibernate.dialect.H2Dialect"
org.hibernate.dialect: "H2Dialect"


# --------------------- Postgres
springPostgresexample.datasource:
  url: "jdbc:postgresql://localhost/cherrydb"
  username: "camunda"
  password: "camunda"
  driver-class-name: "org.postgresql.Driver"
spring2.jpa.database-platform: "org.hibernate.dialect.PostgreSQL94Dialect"

orgPostgres.hibernate.dialect: "PostgreSQL94Dialect"



# allow CLOB in Postgres
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation: true




spring.jpa:
  generate-ddl: true
  hibernate.ddl-auto: "update"

  properties:
    hibernate:
      format_sql: true
      show-sql: true


# logging.level.org.hibernate.SQL: TRACE
# logging.level.org.hibernate.type.descriptor.sql.BasicBinder: TRACE
# logging.level.org.hibernate.postgresql : TRACE
# spring.jpa.properties.hibernate.show_sql: true
# spring.jpa.properties.hibernate.use_sql_comments: true
# spring.jpa.properties.hibernate.format_sql: true

